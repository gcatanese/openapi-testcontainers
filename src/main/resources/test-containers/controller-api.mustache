{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"io"
	"os"
	"strings"

	"github.com/gin-gonic/gin"
){{#operation}}

// {{nickname}} - {{{summary}}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func {{nickname}}(c *gin.Context) {

	// avoid package imported but not used error (ignore code)
	_, _ = io.ReadAll(strings.NewReader("noop"))
	_, _ = os.ReadFile("noop")
	_ = strings.ToUpper("noop")

{{#vendorExtensions.items}}
	{{^requestBody}}{{#-first}}
	var paramValue string
	var expected string

	{{/-first}}
	paramValue = c.Param("{{parameterName}}")
	expected = "{{parameterValue}}"

    // request: {{{requestExampleName}}} response: {{{responseExampleName}}}
	if(strings.EqualFold(strip(paramValue), strip(expected))) {
    	c.Data({{statusCode}}, "application/json", []byte(`{{{responseBody}}}`))

    	return
    }
	{{/requestBody}}
	{{#requestBody}}{{#-first}}
	var body []byte
	var expected []byte
	var eq bool

    {{/-first}}
	// input (payload request body)
	body, _ = io.ReadAll(c.Request.Body)

	// expected output
	expected = []byte(`{{{requestBody}}}`)

	eq, _ = JSONBytesEqual(body, expected)

    // request: {{{requestExampleName}}} response: {{{responseExampleName}}}
	if(eq) {
		c.Data({{statusCode}}, "application/json", []byte(`{{{responseBody}}}`))

		return
	}
	{{/requestBody}}

{{/vendorExtensions.items}}
	// fallback
	c.Data({{vendorExtensions.fallback.statusCode}}, "application/json", []byte(`{{{vendorExtensions.fallback.responseBody}}}`))
}{{/operation}}{{/operations}}


